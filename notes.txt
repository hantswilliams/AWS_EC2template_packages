#!/bin/bash

#Items that have been done / included within this template: 
#Note - for this file to run in ubuntu, will need to do chmod a+x /where/i/saved/it/hello_world.sh


echo "Performing apt-get update"
#first to general update:
sudo apt-get update


##IMPORTANT - TO INSTALL PYENV - TO INSTALL PYENV - TO INSTALL PYENV - TO INSTALL PYENV 
##This simple install of PYENV was found @ https://gist.github.com/softwaredoug/a871647f53a0810c55ac
yes | sudo apt-get install git python-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev
yes | sudo pip install virtualenvwrapper

git clone https://github.com/yyuu/pyenv.git ~/.pyenv
git clone https://github.com/yyuu/pyenv-virtualenvwrapper.git ~/.pyenv/plugins/pyenv-virtualenvwrapper

echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init -)"' >> ~/.bashrc
echo 'pyenv virtualenvwrapper' >> ~/.bashrc

exec "$SHELL"

pyenv install 3.6.2
pyenv global 3.6.2 



##IMPORTANT - INSTALL AIRFLOW - INSTALL AIRFLOW - INSTALL AIRFLOW

echo 'export AIRFLOW_HOME=~/airflow' >> ~/.bashrc
SLUGIFY_USES_TEXT_UNIDECODE=yes pip install apache-airflow
airflow initdb
 
##Then need to configure the airflow.cfg file with the following
mkdir -p /home/ubuntu/airflow/dags/

#load_examplesvariable to False. Save and quit.

## Then can run it: 
#airflow webserver -p 8080
#airflow scheduler


Echo "INSTALLING a bunch of PIP packages" 
yes | pip install pandas 
yes | pip install --upgrade setuptools
yes | pip install --upgrade google-cloud-storage
yes | pip install pandas-gbq -U
yes | pip install flask 
yes | pip install pandas 
yes | pip install openpyxl
yes | pip install pandasql
Yes | pip install Flask-AutoIndex


##when creating a new app, create a virtual environment 
pyvenv venv   			##do this inside of the folder, this will create a virtual environment called venv 
source venv/bin/activate  	##this will then activate 
pip install requests		##this shows example of installing package request 
pip freeze > requirements.txt	##this will create a requirements doc with the pip packages installed  


##note - currently flask.ext is broken, perhaps installed older version of flask and autoindex
##Create a python flask app that has this below, so can access the file system
import os.path
from flask import Flask
from flask.ext.autoindex import AutoIndex

app = Flask(__name__)
AutoIndex(app, browse_root='/home/ubuntu/airflow/output')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)







